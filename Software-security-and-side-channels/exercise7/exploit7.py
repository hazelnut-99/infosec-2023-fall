import re
from itertools import groupby
import sys

file = open(sys.argv[1], 'r')
#file = open("/Users/hongshu/Desktop/eth-master-study/2023-fall/information-security-lab/module03-SoftwareSecurity/handout/isl-wip/handout/exercise7/traces/29f7085119cb234b6c97522a3ff09dfe2f62a4569.out")
lines = file.readlines()

count_dict = {}
for i in range(len(lines)-1):
    line = int(lines[i].strip(), 16)

    if line not in count_dict:
        count_dict[line] = 0
    else:
        count_dict[line] += 1

"""
A :  gmpz libs
B : start
C : initCruve
D : free_curve
E :  pointdouble
F :  pointaddition
G :  doubleandadd
H :  compute_dh_pubkey
I :  main and _fini 
"""
translation_table = {}
target_char = 'A'
for symbol in sorted(count_dict.keys()):
    translation_table[symbol] = target_char
    target_char = chr(ord(target_char) + 1)

# mapping address to characters, easier to process
translated_sequence = [translation_table[int(line.strip(), 16)] for line in lines]

# remove irrelevant
translated_sequence = [char for char in translated_sequence if char in ['E', 'F', 'G']]
translated_sequence = "".join([x for x, _ in groupby(translated_sequence)])
#  E .... G: 0
#  E .... G F .... G -> 1
REGEX_1 = "E.*?G"
REGEX_2 = "F.*?G"

i = 0
while i < len(translated_sequence):
    if re.match(REGEX_1, translated_sequence[i:]) is None:
        i += 1
    else:
        break

result_bits = []
while i < len(translated_sequence):
    pointdouble_match = re.match(REGEX_1, translated_sequence[i:])
    if pointdouble_match is None:
        break
    i += len(pointdouble_match.group())
    pointaddition_match = re.match(REGEX_2, translated_sequence[i:])
    if pointaddition_match:
        i += len(pointaddition_match.group())
        result_bits.append(1)
    else:
        result_bits.append(0)

result_1 = [1] + result_bits
result_2 = [0] + result_bits

result = int("".join([str(bit) for bit in result_1]), 2)
print(hex(result))

result = int("".join([str(bit) for bit in result_2]), 2)
print(hex(result))


# 29f7085119cb234b6c97522a3ff09dfe2f62a4569
# 12d44a8de8ff721ff8a895d26da589a7311421df2


